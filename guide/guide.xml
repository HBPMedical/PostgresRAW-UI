<?xml version="1.0" encoding="UTF-8"?>
<guide>

<step>
<doc>The user interface is about to run in demo mode. This means we're going to walk
through a number of QRAWL queries which illustrate the capabilities of the language.
In order to effectively have the demo *execute* the queries, these two datasets
below should be loaded (if you haven't loaded them already, please do so).
Once you see the notification both datasets were uploaded, click next.

* publications.json ([load][1])
* authors.json ([load][2])

[1]:javascript:load_dataset("publications")
[2]:javascript:load_dataset("authors")
</doc>
</step>

<step>
<doc>The query below should execute successfully and return 50 rows shown
on the right side of the screen. Have a quick look to the authors table.
Rows are plain records with three fields: name, title and year.

If this doesn't work, then go back to the previous step and ensure both
datasets are loaded.
</doc>
<query>
select * from authors
</query>
</step>

<step>
<doc>The query below should return a single number (1000, the number
of publications). We're all set, click next to start querying the
data.

If this doesn't work, go back and load publications.
</doc>
<query>
count(publications)
</query>
</step>

<step>
<doc>
QRAWL is intended to be compatible with SQL. The query below is returning
the authors which are professors.
</doc>
<query>select * from authors where title = "professor"</query>
</step>

<step>
<doc>Typical SQL aggregation are supported. Here we report the number of
author in each possible job title.

</doc>
<query>select distinct title, count(*) from authors group by title</query>
</step>

<step>
<doc>
In QRAWL, the star sign is in fact an alias to *the subset of authors having a certain title*, and the
count operator runs on that collection and returns the number of elements it contains. This means
the star sign can be handled as a collection itself. Click next to see.
</doc>
<query>select distinct title, count(*) from authors group by title</query>
</step>

<step>
<doc>Here we removed the aggregation function (count), so that the query returns
rows which contain a *nested list* of authors (the ones with the corresponding title).
Let's do some more processing on that group collection.
</doc>
<query>select distinct title, * from authors group by title</query>
</step>

<step>
<doc>We extract the years of the related authors.
</doc>
<query>select distinct title, (select year from *) from authors group by title</query>
</step>

<step>
<doc>We think using the star sign in a *from* is not very readable (but it works).
We prefer to use the *partition* keyword instead. For now one can consider the
*partition* keyword as an alias to the star sign for the grouped queries (there is a difference
between the star and partition but we'll see later, in the examples we run now, they
are the same). Let's use partition (click next).
</doc>
<query>select distinct title, (select year from *) from authors group by title</query>
</step>

<step>
<doc>It is more readable. Let's keep doing more queries.
</doc>
<query>select distinct title, (select year from partition) from authors group by title</query>
</step>

<step>
<doc>We do an inner group by on the grouped data. That query returns four rows
(one per title) and each row contains a field *years* being a list of years
associated to the number of authors born that year (and having already been filtered on their
title).

But we can also extract the authors themselves instead of counting them (click next).
</doc>
<query>
select distinct title, (select distinct year, count(partition) from partition group by year) 
from authors
group by title
</query>
</step>


<step>
<doc>Now we find the original author rows in the inner list. As expected, the authors
found in the inner nested list are all of the corresponding title and year.
</doc>
<query>
select distinct title, (select distinct year, partition from partition group by year) 
from authors
group by title
</query>
</step>

<step>
<doc>This is it for nested queries. Now let's review the programming capabilities
of QRAWL.
</doc>
<query>
</query>
</step>

<step>
<doc>QRAWL supports variable assignments to simplify the edition of queries.
</doc>
<query>
{
    M := max(select year from authors);
    select * from authors where year = M
}
</query>
</step>

<step>
<doc>A slightly more complicated example which would be a little hard
to type in one single query. This returns a record with two collections
of people.

Let's have a look to functions now.
</doc>
<query>
{
    M := max(select year from authors);
    m := min(select year from authors);
    juniors := select * from authors where year = M; // max
    seniors := select * from authors where year = m; // min
    (juniors, seniors)
}
</query>
</step>

<step>
<doc>Here we implement a helper function to compute some category
from the authors titles.
</doc>
<query>
{
    category := \x -> if x.title = "PhD" then "short-term" else "staff";
    select x.name, category(x) as cat from x in authors
}
</query>
</step>


<step>
<doc>This is failing query #1</doc>
<query>{
    M := max(select year from authors);
    m := min(select year from authors);
    (juniors: select * from authors where year = m, seniors: select * from authors where year = M)
}
</query>
</step>

<step>
<doc>This is failing query #2</doc>
<query>{
    category := \a -> if a.title = "PhD" then "short-term" else "staff"
    select category(a), * from a in authors group by category(a)
}
</query>
</step>

<step>
<doc>This is failing query #3</doc>
<query>
{
    Y := list(1983, 1978, 1990);
    select * from authors where year in Y
}
</query>
</step>

</guide>
